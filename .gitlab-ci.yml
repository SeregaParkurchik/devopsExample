stages:
  - test
  - build
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

services:
  - docker:dind

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

test-backend-go:
  stage: test
  image: golang:1.21-alpine
  script:
    - cd backend-go
    - go test ./...
  only:
    - main

test-frontend-next:
  stage: test
  image: node:18-alpine
  script:
    - cd frontend-next
    - npm install
    - npm run build
  only:
    - main

build-backend-go:
  stage: build
  image: docker:latest
  script:
    - cd backend-go
    - docker build -t $CI_REGISTRY_IMAGE/backend-go:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/backend-go:$CI_COMMIT_SHA
  only:
    - main

build-frontend-next:
  stage: build
  image: docker:latest
  script:
    - cd frontend-next
    - docker build -t $CI_REGISTRY_IMAGE/frontend-next:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/frontend-next:$CI_COMMIT_SHA
  only:
    - main

deploy:
  stage: deploy
  image: alpine:latest
  script:
    - apk add --no-cache openssh-client
    - echo "$SSH_PRIVATE_KEY" > key.pem
    - chmod 600 key.pem
    - ssh -o StrictHostKeyChecking=no -i key.pem $SERVER_USER@$SERVER_IP "
        docker login -u '$CI_REGISTRY_USER' -p '$CI_REGISTRY_PASSWORD' $CI_REGISTRY &&
        docker pull $CI_REGISTRY_IMAGE/backend-go:$CI_COMMIT_SHA &&
        docker pull $CI_REGISTRY_IMAGE/frontend-next:$CI_COMMIT_SHA &&
        docker-compose down &&
        docker-compose up -d
      "
  only:
    - main