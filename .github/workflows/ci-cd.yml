name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}

jobs:
  test-backend-go:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: backend-go/go.mod
      
      - name: Run Go tests
        run: |
          cd backend-go
          go test -v ./...
      
      - name: Build Go binary
        run: |
          cd backend-go
          go build -o app .

  test-frontend-next:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend-next/package-lock.json
      
      - name: Install dependencies
        run: |
          cd frontend-next
          npm ci
      
      - name: Run tests
        run: |
          cd frontend-next
          npm test -- --watchAll=false
      
      - name: Build Frontend
        run: |
          cd frontend-next
          npm run build

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-backend-go, test-frontend-next]
    permissions:
      contents: read
      packages: write
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/backend-go
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend-next
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: ./backend-go
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/backend-go:latest
          labels: ${{ steps.meta.outputs.labels }}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend-next
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend-next:latest
          labels: ${{ steps.meta.outputs.labels }}

  deploy-to-k8s:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
      
      - name: Update Kubernetes deployments
        run: |
          # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–∑—ã –≤ deployment —Ñ–∞–π–ª–∞—Ö
          sed -i 's|image:.*backend-go.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/backend-go:latest|' k8s/backend-deployment.yaml
          sed -i 's|image:.*frontend-next.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/frontend-next:latest|' k8s/frontend-deployment.yaml
          
          # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
          kubectl apply -f k8s/
      
      - name: Verify deployment
        run: |
          kubectl get pods
          kubectl get services
          kubectl get ingress

  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-to-k8s]
    
    steps:
      - name: Wait for deployment to be ready
        run: |
          sleep 30
      
      - name: Check backend health
        run: |
          curl -f http://${{ secrets.K8S_INGRESS_IP }}/api/health || exit 1
      
      - name: Check frontend
        run: |
          curl -f http://${{ secrets.K8S_INGRESS_IP }}/ || exit 1

  notify:
    runs-on: ubuntu-latest
    needs: [health-check]
    if: always()
    
    steps:
      - name: Notify Slack on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'üö® Deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Notify on success
        if: success()
        run: |
          echo "üéâ CI/CD Pipeline Completed Successfully!"